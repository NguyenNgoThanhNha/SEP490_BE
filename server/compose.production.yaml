# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: "3.8"
services:
  server_spa:
    build:
      context: .
      target: final
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__MySqlConnection=Server=database_spa;Database=SPA;User ID=root;Password=${MySQLPassword};
      - JwtSettings__Key=${JwtKey}
      - JwtSettings__Refresh=${JwtRefreshKey}
      - MailSettings__Server=${MailServer}
      - MailSettings__Port=${MailPort}
      - MailSettings__SenderName=${MailSenderName}
      - MailSettings__SenderEmail=${MailSenderEmail}
      - MailSettings__UserName=${MailUserName}
      - MailSettings__PassWord=${MailPassword}
      - CloundSettings__CloudName=${CloundName}
      - CloundSettings__CloudKey=${CloundKey}
      - CloundSettings__CloudSecret=${CloundSecret}
      - ZaloPaySetting__app_id=${ZaloPayAppId}
      - ZaloPaySetting__key1=${ZaloPayKey1}
      - ZaloPaySetting__key2=${ZaloPayKey2}
      - PayOSSetting__ClientId=${PayOSClientId}
      - PayOSSetting__ApiKey=${PayOSApiKey}
      - PayOSSetting__ChecksumKey=${PayOSChecksumKey}
      - PayOSSetting__Domain=${PayOSDomain}
      - BotChatSetting__ApiKey=${BotChatApiKey}
      - AISkinSetting__Url=${AISkinAnalyzeUrl}
      - AISkinSetting__ApiKey=${AISkinAnalyzeApiKey}
      - ElasticSettings__baseUrl=${ElasticSettingsBaseUrl}
      - ElasticSettings__defaultIndex=${ElasticSettingsDefaultIndex}
      - ElasticSettings__finger=${ElasticSettingsFinger}
      - ElasticSettings__password=${ElasticSettingsPassword}
    ports:
      - ${PortServer}:8080
    depends_on:
      database_spa:
        condition: service_started
      elasticsearch:
        condition: service_started
  database_spa:
    image: mysql:8.0
    container_name: database_spa
    environment:
      - MYSQL_DATABASE=SPA
      - MYSQL_ROOT_PASSWORD=${MySQLPassword}
    volumes:
      - spa_mysql_data:/var/lib/mysql
    ports:
      - ${PortDatabase}:3306
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.1
    container_name: es01
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
volumes:
  spa_mysql_data:
  es_data:

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt
